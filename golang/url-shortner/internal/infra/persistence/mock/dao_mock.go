// Code generated by MockGen. DO NOT EDIT.
// Source: dao.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	ports "github.com/ismael3s/challenges/url-shortner/internal/application/ports"
	gomock "go.uber.org/mock/gomock"
)

// MockDAO is a mock of DAO interface.
type MockDAO struct {
	ctrl     *gomock.Controller
	recorder *MockDAOMockRecorder
}

// MockDAOMockRecorder is the mock recorder for MockDAO.
type MockDAOMockRecorder struct {
	mock *MockDAO
}

// NewMockDAO creates a new mock instance.
func NewMockDAO(ctrl *gomock.Controller) *MockDAO {
	mock := &MockDAO{ctrl: ctrl}
	mock.recorder = &MockDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDAO) EXPECT() *MockDAOMockRecorder {
	return m.recorder
}

// FindByShortURL mocks base method.
func (m *MockDAO) FindByShortURL(shortURL string) (*ports.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByShortURL", shortURL)
	ret0, _ := ret[0].(*ports.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByShortURL indicates an expected call of FindByShortURL.
func (mr *MockDAOMockRecorder) FindByShortURL(shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByShortURL", reflect.TypeOf((*MockDAO)(nil).FindByShortURL), shortURL)
}

// Save mocks base method.
func (m *MockDAO) Save(model ports.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockDAOMockRecorder) Save(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDAO)(nil).Save), model)
}
